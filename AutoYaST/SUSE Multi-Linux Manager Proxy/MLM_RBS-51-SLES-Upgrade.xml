<?xml version="1.0"?>
<!DOCTYPE profile>
<!-- Profile updated by dvosburg at suse dot com 20250923 - Upgrade to RBS on SLES 15 SP7
It assumes system variables plus these entered on the variables tab:
org='organization_id'
distrotree='autoinstallation_distribution_label'
channel_prefix='clm_channel_prefix' or blank for SCC channels
registration_key='activation_key_for_post_upgrade'
-->
<profile xmlns="http://www.suse.com/1.0/yast2ns" xmlns:config="http://www.suse.com/1.0/configns">
   <add-on>
    <add_on_products config:type="list">
<!-- All SLES 15 SP7 repos listed here - comment out what is unneeded -->
   <!-- Manager Tools repos -->
      <listentry>
        <ask_on_error config:type="boolean">true</ask_on_error>
        #if $getVar('channel_prefix', '') != ""
        <media_url>http://$redhat_management_server/ks/dist/child/$getVar('channel_prefix', '')-managertools-sle15-pool-$arch-sp7/$distrotree</media_url>
        #else
        <media_url>http://$redhat_management_server/ks/dist/child/managertools-sle15-pool-$arch-sp7/$distrotree</media_url>
        #end if
        <name>$getVar('channel_prefix', '') Multi-Linux-ManagerTools-SLE Pool</name>
        <product>Multi-Linux-ManagerTools-SLE</product>
     </listentry>
     <listentry>
        <ask_on_error config:type="boolean">true</ask_on_error>
        #if $getVar('channel_prefix', '') != ""
        <media_url>http://$redhat_management_server/ks/dist/child/$getVar('channel_prefix', '')-managertools-sle15-updates-$arch-sp7/$distrotree</media_url>
        #else
        <media_url>http://$redhat_management_server/ks/dist/child/managertools-sle15-updates-$arch-sp7/$distrotree</media_url>
        #end if
        <name>$getVar('channel_prefix', '') Multi-Linux-ManagerTools-SLE Updates</name>
        <product>Multi-Linux-ManagerTools-SLE</product>
      </listentry>
   <!-- Base system repos -->
      <listentry>
        <ask_on_error config:type="boolean">true</ask_on_error>
        #if $getVar('channel_prefix', '') != ""
        <media_url>http://$redhat_management_server/ks/dist/child/$getVar('channel_prefix', '')-sle-module-basesystem15-sp7-pool-$arch/$distrotree</media_url>
        #else
        <media_url>http://$redhat_management_server/ks/dist/child/sle-module-basesystem15-sp7-pool-$arch/$distrotree</media_url>
        #end if
        <name>$getVar('channel_prefix', '') SLE-Module-Basesystem15-SP7 Pool for $arch</name>
        <product>sle-module-basesystem</product>
      </listentry>
      <listentry>
        <ask_on_error config:type="boolean">true</ask_on_error>
        #if $getVar('channel_prefix', '') != ""
        <media_url>http://$redhat_management_server/ks/dist/child/$getVar('channel_prefix', '')-sle-module-basesystem15-sp7-updates-$arch/$distrotree</media_url>
        #else
        <media_url>http://$redhat_management_server/ks/dist/child/sle-module-basesystem15-sp7-updates-$arch/$distrotree</media_url>
        #end if
        <name>$getVar('channel_prefix', '') SLE-Module-Basesystem15-sp7 Updates for $arch</name>
        <product>sle-module-basesystem</product>
      </listentry>
     <!-- Server Applications repos -->
      <listentry>
        <ask_on_error config:type="boolean">true</ask_on_error>
        #if $getVar('channel_prefix', '') != ""
        <media_url>http://$redhat_management_server/ks/dist/child/$getVar('channel_prefix', '')-sle-module-server-applications15-sp7-pool-$arch/$distrotree</media_url>
        #else
        <media_url>http://$redhat_management_server/ks/dist/child/sle-module-server-applications15-sp7-pool-$arch/$distrotree</media_url>
        #end if
        <name>$getVar('channel_prefix', '') SLE-Module-Server-Applications15-sp7 Pool for $arch</name>
        <product>sle-module-server-applications</product>
      </listentry>
      <listentry>
        <ask_on_error config:type="boolean">true</ask_on_error>
        #if $getVar('channel_prefix', '') != ""
        <media_url>http://$redhat_management_server/ks/dist/child/$getVar('channel_prefix', '')-sle-module-server-applications15-sp7-updates-$arch/$distrotree</media_url>
        #else
        <media_url>http://$redhat_management_server/ks/dist/child/sle-module-server-applications15-sp7-updates-$arch/$distrotree</media_url>
        #end if
        <name>$getVar('channel_prefix', '') SLE-Module-Server-Applications15-sp7 Updates for $arch</name>
        <product>sle-module-server-applications</product>
      </listentry>
   <!-- containers repos -->
      <listentry>
        <ask_on_error config:type="boolean">true</ask_on_error>
        #if $getVar('channel_prefix', '') != ""
        <media_url>http://$redhat_management_server/ks/dist/child/$getVar('channel_prefix', '')-sle-module-containers15-sp7-pool-$arch/$distrotree</media_url>
        #else
        <media_url>http://$redhat_management_server/ks/dist/child/sle-module-containers15-sp7-pool-$arch/$distrotree</media_url>
        #end if
        <name>$getVar('channel_prefix', '') SLE-Module-Containers15-SP7-Pool for $arch</name>
        <product>sle-module-containers</product>
      </listentry>
      <listentry>
        <ask_on_error config:type="boolean">true</ask_on_error>
        #if $getVar('channel_prefix', '') != ""
        <media_url>http://$redhat_management_server/ks/dist/child/$getVar('channel_prefix', '')-sle-module-containers15-sp7-updates-$arch/$distrotree</media_url>
        #else
        <media_url>http://$redhat_management_server/ks/dist/child/sle-module-containers15-sp7-updates-$arch/$distrotree</media_url>
        #end if
        <name>$getVar('channel_prefix', '') SLE-Module-Containers15-SP7-Updates for $arch</name>
        <product>sle-module-containers</product>
      </listentry>
    <!-- SLE15sp7 product updates -->
       <listentry>
        <ask_on_error config:type="boolean">true</ask_on_error>
        #if $getVar('channel_prefix', '') != ""
        <media_url>http://$redhat_management_server/ks/dist/child/$getVar('channel_prefix', '')-sle-product-sles15-sp7-updates-$arch/$distrotree</media_url>
        #else
        <media_url>http://$redhat_management_server/ks/dist/child/sle-product-sles15-sp7-updates-$arch/$distrotree</media_url>
        #end if
        <name>SUSE Linux Enterprise Server 15 SP7 Updates for $arch</name>
        <product>SLES</product>
      </listentry>
     <!-- SLE15 Installer updates
      <listentry>
        <ask_on_error config:type="boolean">true</ask_on_error>
        #if $getVar('channel_prefix', '') != ""
        <media_url>http://$redhat_management_server/ks/dist/child/$getVar('channel_prefix', '')-sle15-sp7-installer-updates-$arch/$distrotree</media_url>
        #else
        <media_url>http://$redhat_management_server/ks/dist/child/sle15-sp7-installer-updates-$arch/$distrotree</media_url>
        #end if
        <name>SUSE Linux Enterprise Server 15 SP7 Installer Updates for $arch</name>
        <product>SLES</product>
      </listentry>
      -->
 <!-- MLM 5.1 Retail Branch Server repos -->
      <listentry>
        <ask_on_error config:type="boolean">true</ask_on_error>
        #if $getVar('channel_prefix', '') != ""
        <media_url>http://$redhat_management_server/ks/dist/child/$getVar('channel_prefix', '')-suse-multi-linux-manager-retail-branch-server-sle-5.1-pool-$arch-sp7/$distrotree</media_url>
        #else
        <media_url>http://$redhat_management_server/ks/dist/child/suse-multi-linux-manager-retail-branch-server-sle-5.1-pool-$arch-sp7/$distrotree</media_url>
        #end if
        <name>$getVar('channel_prefix', '') Multi-Linux-Manager-Retail-Branch-Server-5.1-Pool for $arch SP7</name>
        <product>Multi-Linux-Manager-Retail-Branch-Server-SLE</product>
      </listentry>
      <listentry>
        <ask_on_error config:type="boolean">true</ask_on_error>
      #if $getVar('channel_prefix', '') != ""
        <media_url>http://$redhat_management_server/ks/dist/child/$getVar('channel_prefix', '')-suse-multi-linux-manager-retail-branch-server-sle-5.1-updates-$arch-sp7/$distrotree</media_url>
        #else
        <media_url>http://$redhat_management_server/ks/dist/child/suse-multi-linux-manager-retail-branch-server-sle-5.1-updates-$arch-sp7/$distrotree</media_url>
        #end if
        <name>$getVar('channel_prefix', '') Multi-Linux-Manager-Retail-Branch-Server-5.1-Updates for $arch SP7</name>
        <product>Multi-Linux-Manager-Retail-Branch-Server-SLE</product>
      </listentry>

  <!-- MLM 5.1 Proxy repos
      <listentry>
        <ask_on_error config:type="boolean">true</ask_on_error>
        #if $getVar('channel_prefix', '') != ""
        <media_url>http://$redhat_management_server/ks/dist/child/$getVar('channel_prefix', '')-suse-multi-linux-manager-proxy-sle-5.1-pool-$arch-sp7/$distrotree</media_url>
        #else
        <media_url>http://$redhat_management_server/ks/dist/child/suse-multi-linux-manager-proxy-sle-5.1-pool-$arch-sp7/$distrotree</media_url>
        #end if
        <name>$getVar('channel_prefix', '') Multi-Linux-Manager-Proxy-5.1-Pool for $arch SP7</name>
        <product>Multi-Linux-Manager-Proxy-SLE</product>
      </listentry>
      <listentry>
        <ask_on_error config:type="boolean">true</ask_on_error>
      #if $getVar('channel_prefix', '') != ""
        <media_url>http://$redhat_management_server/ks/dist/child/$getVar('channel_prefix', '')-suse-multi-linux-manager-proxy-sle-5.1-updates-$arch-sp7/$distrotree</media_url>
        #else
        <media_url>http://$redhat_management_server/ks/dist/child/suse-multi-linux-manager-proxy-sle-5.1-updates-$arch-sp7/$distrotree</media_url>
        #end if
        <name>$getVar('channel_prefix', '') Multi-Linux-Manager-Proxy-5.1-Updates for $arch SP7</name>
        <product>Multi-Linux-Manager-Proxy-SLE</product>
      </listentry>
       -->

  <!-- End of commented out repositories -->
    </add_on_products>
  </add-on>
  <upgrade>
    <stop_on_solver_conflict config:type="boolean">true</stop_on_solver_conflict>
  </upgrade>
  <software>
    <products config:type="list">
      <product>SLES</product>
    </products>
  <!-- Add any desired additional packages or patterns here -->
    <packages config:type="list">
      <package>autoyast2-installation</package>
      <package>sle-manager-tools-release</package>
      <package>issue-generator</package>
      <!-- Use salt bundle by default, uncomment salt-minion if needed.  This should match your original system. -->
      <package>venv-salt-minion</package>
      <!--<package>salt-minion</package> -->
      <!-- Install the needed 5.1 RBS files -->
      <package>Multi-Linux-Manager-Retail-Branch-Server-release</package>
      <package>podman</package>
      <package>netavark</package>
      <package>mgrpxy</package>
      <package>mgrpxy-bash-completion</package>
      <package>uyuni-storage-setup-proxy</package>
      <!-- Install images to avoid trying to download from the registry -->
      <package>suse-multi-linux-manager-5.1-x86_64-proxy-httpd-image</package>
      <package>suse-multi-linux-manager-5.1-x86_64-proxy-salt-broker-image</package>
      <package>suse-multi-linux-manager-5.1-x86_64-proxy-squid-image</package>
      <package>suse-multi-linux-manager-5.1-x86_64-proxy-ssh-image</package>
      <package>suse-multi-linux-manager-5.1-x86_64-proxy-tftpd-image</package>
    </packages>
    <patterns config:type="list">
      <pattern>base</pattern>
    </patterns>
  <!-- Remove  any deprecated or obsoleted packages and/or patterns here -->
   <remove-packages  config:type="list">
<!-- These were 4.3 VM proxy packages -->
     <package>sle-module-suse-manager-proxy-release</package>
     <package>release-notes-susemanager-proxy</package>
     <package>skelcd-control-suse-manager-retail-branch-server</package>
     <package>/spacewalk.*/</package>
     <package>spacewalk-backend</package>
     <package>spacewalk-base-minimal</package>
     <package>spacewalk-proxy-salt</package>
     <package>susemanager-build-keys</package>
     <package>susemanager-build-keys-web</package>
     <package>rpm-build</package>
     <package>python3-python-debian</package>
     <package>apache2</package>
     <package>apache2-prefork</package>
     <package>apache2-utils</package>
     <package>salt-broker</package>
     <package>python3-salt</package>
     <package>python3-gssapi</package>
     <package>salt</package>
     <package>tftp</package>
     <package>squid</package>
     <package>dhcp-server</package>
     <package>jabberd</package>
     <package>jabberd-sqlite</package>
     <package>spacewalk-setup-jabberd</package>
     <package>skelcd-control-suse-manager-retail-branch-server</package>
     <package>uyuni-base-common</package>
   </remove-packages>
  </software>
  <backup>
    <sysconfig config:type="boolean">true</sysconfig>
    <modified config:type="boolean">true</modified>
    <remove_old config:type="boolean">false</remove_old>
  </backup>
  <networking>
    <keep_install_network config:type="boolean">true</keep_install_network>
    <start_immediately config:type="boolean">true</start_immediately>
  </networking>
<general>
  <signature-handling>
    <accept_unsigned_file         config:type="boolean">true</accept_unsigned_file>
    <accept_file_without_checksum config:type="boolean">true</accept_file_without_checksum>
    <accept_verification_failed   config:type="boolean">true</accept_verification_failed>
    <accept_unknown_gpg_key       config:type="boolean">true</accept_unknown_gpg_key>
    <import_gpg_key               config:type="boolean">true</import_gpg_key>
    <accept_non_trusted_gpg_key   config:type="boolean">true</accept_non_trusted_gpg_key>
  </signature-handling>
  <mode>
    <confirm config:type="boolean">false</confirm>
<!-- Second stage of the yast installer is not needed for an upgrade profile -->
    <second_stage config:type="boolean">false</second_stage>
  </mode>
</general>
<scripts>
  <pre-scripts config:type="list">
<!-- This script is designed to ensure the certificate is present for any 'http' repositories -->
  <script>
      <rerun config:type="boolean">false</rerun>
        <debug config:type="boolean">true</debug>
        <feedback config:type="boolean">false</feedback>
        <filename>01_install_cert</filename>
        <interpreter>shell</interpreter>
        <location/>
        <notification>Installing repository certificate</notification>
        <source><![CDATA[
/usr/bin/curl --insecure -o RHN-ORG-TRUSTED-SSL-CERT https://$redhat_management_server/pub/RHN-ORG-TRUSTED-SSL-CERT
mv RHN-ORG-TRUSTED-SSL-CERT /etc/pki/trust/anchors/
/usr/sbin/update-ca-certificates
     ]]></source>
   </script>
  </pre-scripts>
<!-- This script is designed to ensure the certificate is present for any 'http' repositories, and remove old repositories -->
  <chroot-scripts config:type="list">
   <script>
      <debug config:type="boolean">true</debug>
      <feedback config:type="boolean">false</feedback>
      <filename>chroot.sh</filename>
        <interpreter>shell</interpreter>
        <notification>Removing old repository info</notification>
        <source><![CDATA[
zypper ms -d --all
zypper ms -e --medium-type plugin
zypper mr -d --all
zypper mr -e --medium-type plugin
rm -rf /etc/zypp/repos.d/http*
rm -rf /mnt/etc/zypp/repos.d/suseman* >/mnt/tmp/removed-at-chroot
/usr/bin/curl --insecure -o RHN-ORG-TRUSTED-SSL-CERT https://$redhat_management_server/pub/RHN-ORG-TRUSTED-SSL-CERT
mv RHN-ORG-TRUSTED-SSL-CERT /mnt/etc/pki/trust/anchors/
/usr/sbin/update-ca-certificates
]]>
        </source>
   </script>
  </chroot-scripts>
  <init-scripts config:type="list">
<!-- This script is designed to register with the upgraded activation key and do post-deployment cleanup -->
   <script>
    <filename>uyuni-minion.sh</filename>
    <source>
        <![CDATA[
SALT_MINION_CONF_DIR="/etc/venv-salt-minion/minion.d"
SALT_MINION_SERVICE="venv-salt-minion"
if [ ! -d "$SALT_MINION_CONF_DIR" ]; then
  SALT_MINION_CONF_DIR="/etc/salt/minion.d"
  SALT_MINION_SERVICE="salt-minion"
fi
cat <<EOF >"$SALT_MINION_CONF_DIR/susemanager.conf"
master: $redhat_management_server
server_id_use_crc: adler32
enable_legacy_startup_events: False
enable_fqdns_grains: False
mine_enabled: False

EOF
#set activation_keys = ""
#set management_key  = ""
#if $varExists('registration_key')
   #set activation_keys = $registration_key
#end if

#if $varExists('redhat_management_key')
   #set management_key = $redhat_management_key.split(",",1)[0]
#end if

#if not $activation_keys and $management_key
  #set keys= $redhat_management_key.split(",",1)
  #if len(keys) > 1
     #set activation_keys = $keys[1]
  #end if
#end if

#if $activation_keys or $management_key
cat <<EOF >>"$SALT_MINION_CONF_DIR/susemanager.conf"
grains:
    susemanager:
EOF
#end if
#if $management_key
cat <<EOF >>"$SALT_MINION_CONF_DIR/susemanager.conf"
        management_key: "$management_key"
EOF
#end if
#if $activation_keys
cat <<EOF >>"$SALT_MINION_CONF_DIR/susemanager.conf"
        activation_key: "$activation_keys"
EOF
#end if

#if not $varExists('dont_register')
# if you don't want to register, set the 'dont_register' variable

systemctl restart "$SALT_MINION_SERVICE"
systemctl enable "$SALT_MINION_SERVICE"
#end if

#if not $varExists('dont_0disable_automatic_onlineupdate')
YAOU_SYSCFGFILE="/etc/sysconfig/automatic_online_update"
if [ -f "$YAOU_SYSCFGFILE" ]; then
  echo "* Disable YAST automatic online update."
  sed -i 's/^ *AOU_ENABLE_CRONJOB.*/AOU_ENABLE_CRONJOB="false"/' "$YAOU_SYSCFGFILE"
  for D in /etc/cron.*; do
    test -L $D/opensuse.org-online_update && rm $D/opensuse.org-online_update
  done
fi
#end if

#if not $varExists('dont_disable_local_repos')
echo "* Disable all repos not provided by SUSE Manager Server."
zypper ms -d --all
zypper ms -e --medium-type plugin
zypper mr -d --all
zypper mr -e --medium-type plugin
rm -rf /etc/zypp/repos.d/http* > /tmp/removed-at-init
#end if

# Clean up the reinstallation grub boot entry
rm -rf /etc/grub.d/42_uyuni_reinstall
rm -rf /boot/uyuni-reinstall-kernel /boot/uyuni-reinstall-initrd
/usr/sbin/grub2-mkconfig -o /boot/grub2/grub.cfg
# end reinstallation cleanup

# Change baseproduct link to SLES
rm -rf /etc/products.d/baseproduct
ln -s /etc/products.d/SLES.prod /etc/products.d/baseproduct

# Remove content from old Proxy directories replaced by containers
rm -rf /srv/saltboot/*
rm -rf /var/cache/squid/*

# systemctl restart "$SALT_MINION_SERVICE"
# sleep 10
# systemctl start "$SALT_MINION_SERVICE"

# download config and install proxy
# hostset=`hostname`
# /usr/bin/curl --insecure -o  $hostset-config.tar.gz https://$redhat_management_server/pub/$hostset-config.tar.gz
# mv $hostset-config.tar.gz /root/
# mgrpxy install podman /root/$hostset-config.tar.gz


        ]]>
    </source>
   </script>
  </init-scripts>
 </scripts>
</profile>
